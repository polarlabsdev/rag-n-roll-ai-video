{
  "version": 4,
  "terraform_version": "1.10.3",
  "serial": 23,
  "lineage": "7230adf0-b2a8-154a-9082-1d8c109d99d8",
  "outputs": {
    "rag_n_roll_db_name": {
      "value": "RAG_N_ROLL_DB",
      "type": "string"
    },
    "rag_n_roll_schema_name": {
      "value": "RAG_N_ROLL_SCHEMA",
      "type": "string"
    },
    "streamlit_role_name": {
      "value": "RAG_N_ROLE",
      "type": "string"
    },
    "streamlit_user_name": {
      "value": "STREAMLIT_USER",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "snowflake_account_role",
      "name": "streamlit_role",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "comment": "",
            "fully_qualified_name": "\"RAG_N_ROLE\"",
            "id": "RAG_N_ROLE",
            "name": "RAG_N_ROLE",
            "show_output": [
              {
                "assigned_to_users": 1,
                "comment": "",
                "created_on": "2025-01-08 12:25:28.382 -0800 PST",
                "granted_roles": 0,
                "granted_to_roles": 1,
                "is_current": false,
                "is_default": false,
                "is_inherited": true,
                "name": "RAG_N_ROLE",
                "owner": "ACCOUNTADMIN"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_database",
      "name": "rag_n_roll_db",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "catalog": "",
            "comment": "Database for the RAG-N-ROLL project",
            "data_retention_time_in_days": 7,
            "default_ddl_collation": "",
            "drop_public_schema_on_creation": null,
            "enable_console_output": false,
            "external_volume": "",
            "fully_qualified_name": "\"RAG_N_ROLL_DB\"",
            "id": "RAG_N_ROLL_DB",
            "is_transient": false,
            "log_level": "OFF",
            "max_data_extension_time_in_days": 14,
            "name": "RAG_N_ROLL_DB",
            "quoted_identifiers_ignore_case": false,
            "replace_invalid_characters": false,
            "replication": [],
            "storage_serialization_policy": "OPTIMIZED",
            "suspend_task_after_num_failures": 10,
            "task_auto_retry_attempts": 0,
            "trace_level": "OFF",
            "user_task_managed_initial_warehouse_size": "Medium",
            "user_task_minimum_trigger_interval_in_seconds": 30,
            "user_task_timeout_ms": 3600000
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_grant_account_role",
      "name": "rnr_to_sysadmin",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "\"RAG_N_ROLE\"|ROLE|\"SYSADMIN\"",
            "parent_role_name": "SYSADMIN",
            "role_name": "RAG_N_ROLE",
            "user_name": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "snowflake_account_role.streamlit_role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_grant_account_role",
      "name": "rnr_to_user",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "\"RAG_N_ROLE\"|USER|\"STREAMLIT_USER\"",
            "parent_role_name": null,
            "role_name": "RAG_N_ROLE",
            "user_name": "STREAMLIT_USER"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "snowflake_account_role.streamlit_role",
            "snowflake_service_user.streamlit_user",
            "snowflake_warehouse.rag_n_roll_warehouse"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_grant_ownership",
      "name": "rag_n_roll_ownership",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_role_name": "RAG_N_ROLE",
            "database_role_name": null,
            "id": "ToAccountRole|\"RAG_N_ROLE\"|COPY|OnObject|DATABASE|\"RAG_N_ROLL_DB\"",
            "on": [
              {
                "all": [],
                "future": [],
                "object_name": "RAG_N_ROLL_DB",
                "object_type": "DATABASE"
              }
            ],
            "outbound_privileges": "COPY"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "snowflake_account_role.streamlit_role",
            "snowflake_database.rag_n_roll_db"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_grant_ownership",
      "name": "rag_n_roll_schema_ownership",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_role_name": "RAG_N_ROLE",
            "database_role_name": null,
            "id": "ToAccountRole|\"RAG_N_ROLE\"|COPY|OnObject|SCHEMA|\"RAG_N_ROLL_DB\".\"RAG_N_ROLL_SCHEMA\"",
            "on": [
              {
                "all": [],
                "future": [],
                "object_name": "RAG_N_ROLL_DB.RAG_N_ROLL_SCHEMA",
                "object_type": "SCHEMA"
              }
            ],
            "outbound_privileges": "COPY"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "snowflake_account_role.streamlit_role",
            "snowflake_database.rag_n_roll_db",
            "snowflake_schema.rag_n_roll_schema"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_grant_privileges_to_account_role",
      "name": "example",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_role_name": "RAG_N_ROLE",
            "all_privileges": false,
            "always_apply": false,
            "always_apply_trigger": null,
            "id": "\"RAG_N_ROLE\"|false|false|USAGE|OnAccountObject|WAREHOUSE|\"RAG_N_ROLL\"",
            "on_account": false,
            "on_account_object": [
              {
                "object_name": "RAG_N_ROLL",
                "object_type": "WAREHOUSE"
              }
            ],
            "on_schema": [],
            "on_schema_object": [],
            "privileges": [
              "USAGE"
            ],
            "with_grant_option": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "snowflake_account_role.streamlit_role",
            "snowflake_warehouse.rag_n_roll_warehouse"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_schema",
      "name": "rag_n_roll_schema",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "catalog": "",
            "comment": "Schema for the RAG-N-ROLL project",
            "data_retention_time_in_days": 7,
            "database": "RAG_N_ROLL_DB",
            "default_ddl_collation": "",
            "describe_output": [],
            "enable_console_output": false,
            "external_volume": "",
            "fully_qualified_name": "\"RAG_N_ROLL_DB\".\"RAG_N_ROLL_SCHEMA\"",
            "id": "\"RAG_N_ROLL_DB\".\"RAG_N_ROLL_SCHEMA\"",
            "is_transient": "default",
            "log_level": "OFF",
            "max_data_extension_time_in_days": 14,
            "name": "RAG_N_ROLL_SCHEMA",
            "parameters": [
              {
                "catalog": [
                  {
                    "default": "",
                    "description": "Name of the catalog integration to use for iceberg tables",
                    "key": "CATALOG",
                    "level": "",
                    "value": ""
                  }
                ],
                "data_retention_time_in_days": [
                  {
                    "default": "1",
                    "description": "number of days to retain the old version of deleted/updated data",
                    "key": "DATA_RETENTION_TIME_IN_DAYS",
                    "level": "DATABASE",
                    "value": "7"
                  }
                ],
                "default_ddl_collation": [
                  {
                    "default": "",
                    "description": "Collation that is used for all the new columns created by the DDL statements (if not specified)",
                    "key": "DEFAULT_DDL_COLLATION",
                    "level": "",
                    "value": ""
                  }
                ],
                "enable_console_output": [
                  {
                    "default": "false",
                    "description": "Enable stdout/stderr fast path logging for anonyous stored procs. This is a public parameter (similar to LOG_LEVEL).",
                    "key": "ENABLE_CONSOLE_OUTPUT",
                    "level": "",
                    "value": "false"
                  }
                ],
                "external_volume": [
                  {
                    "default": "",
                    "description": "Name of an external volume that will be used for persisted Iceberg metadata and data files.",
                    "key": "EXTERNAL_VOLUME",
                    "level": "",
                    "value": ""
                  }
                ],
                "log_level": [
                  {
                    "default": "OFF",
                    "description": "LOG_LEVEL to use when filtering events",
                    "key": "LOG_LEVEL",
                    "level": "",
                    "value": "OFF"
                  }
                ],
                "max_data_extension_time_in_days": [
                  {
                    "default": "14",
                    "description": "Maximum number of days to extend data retention beyond the retention period to prevent a stream becoming stale.",
                    "key": "MAX_DATA_EXTENSION_TIME_IN_DAYS",
                    "level": "",
                    "value": "14"
                  }
                ],
                "pipe_execution_paused": [
                  {
                    "default": "false",
                    "description": "Pause processing of files for a pipe",
                    "key": "PIPE_EXECUTION_PAUSED",
                    "level": "",
                    "value": "false"
                  }
                ],
                "quoted_identifiers_ignore_case": [
                  {
                    "default": "false",
                    "description": "If true, the case of quoted identifiers is ignored",
                    "key": "QUOTED_IDENTIFIERS_IGNORE_CASE",
                    "level": "",
                    "value": "false"
                  }
                ],
                "replace_invalid_characters": [
                  {
                    "default": "false",
                    "description": "Replace invalid UTF-8 characters found in Iceberg table external data files with the Unicode replacement character",
                    "key": "REPLACE_INVALID_CHARACTERS",
                    "level": "",
                    "value": "false"
                  }
                ],
                "storage_serialization_policy": [
                  {
                    "default": "OPTIMIZED",
                    "description": "Storage serialization policy used for managed Iceberg table. This include encodings and compressions",
                    "key": "STORAGE_SERIALIZATION_POLICY",
                    "level": "",
                    "value": "OPTIMIZED"
                  }
                ],
                "suspend_task_after_num_failures": [
                  {
                    "default": "10",
                    "description": "How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.",
                    "key": "SUSPEND_TASK_AFTER_NUM_FAILURES",
                    "level": "",
                    "value": "10"
                  }
                ],
                "task_auto_retry_attempts": [
                  {
                    "default": "0",
                    "description": "Maximum Automatic Retries Allowed For A User Task",
                    "key": "TASK_AUTO_RETRY_ATTEMPTS",
                    "level": "",
                    "value": "0"
                  }
                ],
                "trace_level": [
                  {
                    "default": "OFF",
                    "description": "Trace level value to use when generating/filtering trace events",
                    "key": "TRACE_LEVEL",
                    "level": "",
                    "value": "OFF"
                  }
                ],
                "user_task_managed_initial_warehouse_size": [
                  {
                    "default": "Medium",
                    "description": "The initial size of warehouse to use for managed warehouses in the absence of history",
                    "key": "USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE",
                    "level": "",
                    "value": "Medium"
                  }
                ],
                "user_task_minimum_trigger_interval_in_seconds": [
                  {
                    "default": "30",
                    "description": "Minimum amount of time between Triggered Task executions in seconds",
                    "key": "USER_TASK_MINIMUM_TRIGGER_INTERVAL_IN_SECONDS",
                    "level": "",
                    "value": "30"
                  }
                ],
                "user_task_timeout_ms": [
                  {
                    "default": "3600000",
                    "description": "User task execution timeout in milliseconds",
                    "key": "USER_TASK_TIMEOUT_MS",
                    "level": "",
                    "value": "3600000"
                  }
                ]
              }
            ],
            "pipe_execution_paused": false,
            "quoted_identifiers_ignore_case": false,
            "replace_invalid_characters": false,
            "show_output": [
              {
                "comment": "Schema for the RAG-N-ROLL project",
                "created_on": "2025-01-08 13:05:28.245 -0800 PST",
                "database_name": "RAG_N_ROLL_DB",
                "dropped_on": "0001-01-01 00:00:00 +0000 UTC",
                "is_current": false,
                "is_default": false,
                "name": "RAG_N_ROLL_SCHEMA",
                "options": "",
                "owner": "RAG_N_ROLE",
                "owner_role_type": "ROLE",
                "retention_time": "7"
              }
            ],
            "storage_serialization_policy": "OPTIMIZED",
            "suspend_task_after_num_failures": 10,
            "task_auto_retry_attempts": 0,
            "trace_level": "OFF",
            "user_task_managed_initial_warehouse_size": "Medium",
            "user_task_minimum_trigger_interval_in_seconds": 30,
            "user_task_timeout_ms": 3600000,
            "with_managed_access": "default"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "snowflake_database.rag_n_roll_db"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_service_user",
      "name": "streamlit_user",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "abort_detached_query": false,
            "autocommit": true,
            "binary_input_format": "HEX",
            "binary_output_format": "HEX",
            "client_memory_limit": 1536,
            "client_metadata_request_use_connection_ctx": false,
            "client_prefetch_threads": 4,
            "client_result_chunk_size": 160,
            "client_result_column_case_insensitive": false,
            "client_session_keep_alive": false,
            "client_session_keep_alive_heartbeat_frequency": 3600,
            "client_timestamp_type_mapping": "TIMESTAMP_LTZ",
            "comment": "A service user for our streamlit community app.",
            "date_input_format": "AUTO",
            "date_output_format": "YYYY-MM-DD",
            "days_to_expiry": null,
            "default_namespace": null,
            "default_role": "RAG_N_ROLE",
            "default_secondary_roles_option": "DEFAULT",
            "default_warehouse": "RAG_N_ROLL",
            "disabled": "default",
            "display_name": "Streamlit Service User",
            "email": null,
            "enable_unload_physical_type_optimization": true,
            "enable_unredacted_query_syntax_error": false,
            "error_on_nondeterministic_merge": true,
            "error_on_nondeterministic_update": false,
            "fully_qualified_name": "\"STREAMLIT_USER\"",
            "geography_output_format": "GeoJSON",
            "geometry_output_format": "GeoJSON",
            "id": "STREAMLIT_USER",
            "jdbc_treat_decimal_as_int": true,
            "jdbc_treat_timestamp_ntz_as_utc": false,
            "jdbc_use_session_timezone": true,
            "json_indent": 2,
            "lock_timeout": 43200,
            "log_level": "OFF",
            "login_name": "STREAMLIT_USER",
            "mins_to_unlock": -1,
            "multi_statement_count": 1,
            "name": "STREAMLIT_USER",
            "network_policy": "",
            "noorder_sequence_as_default": true,
            "odbc_treat_decimal_as_int": false,
            "parameters": [
              {
                "abort_detached_query": [
                  {
                    "default": "false",
                    "description": "If true, Snowflake will automatically abort queries when it detects that the client has disappeared.",
                    "key": "ABORT_DETACHED_QUERY",
                    "level": "",
                    "value": "false"
                  }
                ],
                "autocommit": [
                  {
                    "default": "true",
                    "description": "The autocommit property determines whether is statement should to be implicitly\nwrapped within a transaction or not. If autocommit is set to true, then a \nstatement that requires a transaction is executed within a transaction \nimplicitly. If autocommit is off then an explicit commit or rollback is required\nto close a transaction. The default autocommit value is true.",
                    "key": "AUTOCOMMIT",
                    "level": "",
                    "value": "true"
                  }
                ],
                "binary_input_format": [
                  {
                    "default": "HEX",
                    "description": "input format for binary",
                    "key": "BINARY_INPUT_FORMAT",
                    "level": "",
                    "value": "HEX"
                  }
                ],
                "binary_output_format": [
                  {
                    "default": "HEX",
                    "description": "display format for binary",
                    "key": "BINARY_OUTPUT_FORMAT",
                    "level": "",
                    "value": "HEX"
                  }
                ],
                "client_memory_limit": [
                  {
                    "default": "1536",
                    "description": "Limit the amount of memory used by the client in MB",
                    "key": "CLIENT_MEMORY_LIMIT",
                    "level": "",
                    "value": "1536"
                  }
                ],
                "client_metadata_request_use_connection_ctx": [
                  {
                    "default": "false",
                    "description": "For client metadata request(getTables()), use session catalog and schema if set to true",
                    "key": "CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX",
                    "level": "",
                    "value": "false"
                  }
                ],
                "client_prefetch_threads": [
                  {
                    "default": "4",
                    "description": "Customer parameter to control threads, 0=auto",
                    "key": "CLIENT_PREFETCH_THREADS",
                    "level": "",
                    "value": "4"
                  }
                ],
                "client_result_chunk_size": [
                  {
                    "default": "160",
                    "description": "Set the max result chunk size in MB on the client side",
                    "key": "CLIENT_RESULT_CHUNK_SIZE",
                    "level": "",
                    "value": "160"
                  }
                ],
                "client_result_column_case_insensitive": [
                  {
                    "default": "false",
                    "description": "Column name search is case insensitive in clients",
                    "key": "CLIENT_RESULT_COLUMN_CASE_INSENSITIVE",
                    "level": "",
                    "value": "false"
                  }
                ],
                "client_session_keep_alive": [
                  {
                    "default": "false",
                    "description": "If true, client session will not expire automatically",
                    "key": "CLIENT_SESSION_KEEP_ALIVE",
                    "level": "",
                    "value": "false"
                  }
                ],
                "client_session_keep_alive_heartbeat_frequency": [
                  {
                    "default": "3600",
                    "description": "Heartbeat frequency in seconds for CLIENT_SESSION_KEEP_ALIVE.",
                    "key": "CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY",
                    "level": "",
                    "value": "3600"
                  }
                ],
                "client_timestamp_type_mapping": [
                  {
                    "default": "TIMESTAMP_LTZ",
                    "description": "If a variable is bound to the TIMESTAMP data type using the bind API, determines which TIMESTAMP* type it should map to:\n  TIMESTAMP_LTZ (default), TIMESTAMP_NTZ",
                    "key": "CLIENT_TIMESTAMP_TYPE_MAPPING",
                    "level": "",
                    "value": "TIMESTAMP_LTZ"
                  }
                ],
                "date_input_format": [
                  {
                    "default": "AUTO",
                    "description": "input format for date",
                    "key": "DATE_INPUT_FORMAT",
                    "level": "",
                    "value": "AUTO"
                  }
                ],
                "date_output_format": [
                  {
                    "default": "YYYY-MM-DD",
                    "description": "display format for date",
                    "key": "DATE_OUTPUT_FORMAT",
                    "level": "",
                    "value": "YYYY-MM-DD"
                  }
                ],
                "enable_unload_physical_type_optimization": [
                  {
                    "default": "true",
                    "description": "Enable physical-type optimizations used in Snowflake to affect the Parquet output",
                    "key": "ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION",
                    "level": "",
                    "value": "true"
                  }
                ],
                "enable_unredacted_query_syntax_error": [
                  {
                    "default": "false",
                    "description": "Enable View Malformed SQL Text feature when parse error occurs",
                    "key": "ENABLE_UNREDACTED_QUERY_SYNTAX_ERROR",
                    "level": "",
                    "value": "false"
                  }
                ],
                "error_on_nondeterministic_merge": [
                  {
                    "default": "true",
                    "description": "raise an error when attempting to merge-update a row that joins many rows",
                    "key": "ERROR_ON_NONDETERMINISTIC_MERGE",
                    "level": "",
                    "value": "true"
                  }
                ],
                "error_on_nondeterministic_update": [
                  {
                    "default": "false",
                    "description": "raise an error when attempting to update a row that joins many rows",
                    "key": "ERROR_ON_NONDETERMINISTIC_UPDATE",
                    "level": "",
                    "value": "false"
                  }
                ],
                "geography_output_format": [
                  {
                    "default": "GeoJSON",
                    "description": "GEOGRAPHY display format: GeoJSON, WKT, or WKB(case-insensitive)",
                    "key": "GEOGRAPHY_OUTPUT_FORMAT",
                    "level": "",
                    "value": "GeoJSON"
                  }
                ],
                "geometry_output_format": [
                  {
                    "default": "GeoJSON",
                    "description": "GEOMETRY display format: GeoJSON, WKT, or WKB(case-insensitive)",
                    "key": "GEOMETRY_OUTPUT_FORMAT",
                    "level": "",
                    "value": "GeoJSON"
                  }
                ],
                "jdbc_treat_decimal_as_int": [
                  {
                    "default": "true",
                    "description": "When scale is 0, whether to treat Decimal as Int in JDBC",
                    "key": "JDBC_TREAT_DECIMAL_AS_INT",
                    "level": "",
                    "value": "true"
                  }
                ],
                "jdbc_treat_timestamp_ntz_as_utc": [
                  {
                    "default": "false",
                    "description": "When true, Timestamp_NTZ values are always stored in UTC timezone",
                    "key": "JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC",
                    "level": "",
                    "value": "false"
                  }
                ],
                "jdbc_use_session_timezone": [
                  {
                    "default": "true",
                    "description": "When true, JDBC driver will not display timezone offset between JVM and session.",
                    "key": "JDBC_USE_SESSION_TIMEZONE",
                    "level": "",
                    "value": "true"
                  }
                ],
                "json_indent": [
                  {
                    "default": "2",
                    "description": "Width of indentation in JSON output (0 for compact)",
                    "key": "JSON_INDENT",
                    "level": "",
                    "value": "2"
                  }
                ],
                "lock_timeout": [
                  {
                    "default": "43200",
                    "description": "Number of seconds to wait while trying to lock a resource, before timing out \nand aborting the statement. A value of 0 turns off lock waiting i.e. the \nstatement must acquire the lock immediately or abort. If multiple resources \nneed to be locked by the statement, the timeout applies separately to each \nlock attempt.",
                    "key": "LOCK_TIMEOUT",
                    "level": "",
                    "value": "43200"
                  }
                ],
                "log_level": [
                  {
                    "default": "OFF",
                    "description": "LOG_LEVEL to use when filtering events",
                    "key": "LOG_LEVEL",
                    "level": "",
                    "value": "OFF"
                  }
                ],
                "multi_statement_count": [
                  {
                    "default": "1",
                    "description": "Number of statement included in submitted query text.\nThis parameter is submitted by user to avoid sql injection.\nValue 1 means one statement, value \u003e 1 means n statement\ncan be executed, if not equal to the value will raise the\nexception. Value 0 means any number of statement can be\n executed",
                    "key": "MULTI_STATEMENT_COUNT",
                    "level": "",
                    "value": "1"
                  }
                ],
                "network_policy": [
                  {
                    "default": "",
                    "description": "Network policy assigned for the given target.",
                    "key": "NETWORK_POLICY",
                    "level": "",
                    "value": ""
                  }
                ],
                "noorder_sequence_as_default": [
                  {
                    "default": "true",
                    "description": "Whether we make NOORDER the default option for creating new sequences",
                    "key": "NOORDER_SEQUENCE_AS_DEFAULT",
                    "level": "",
                    "value": "true"
                  }
                ],
                "odbc_treat_decimal_as_int": [
                  {
                    "default": "false",
                    "description": "When scale is 0, whether to treat Decimal as Int in ODBC",
                    "key": "ODBC_TREAT_DECIMAL_AS_INT",
                    "level": "",
                    "value": "false"
                  }
                ],
                "prevent_unload_to_internal_stages": [
                  {
                    "default": "false",
                    "description": "Prevent unload sensitive data to non-external stages (user stage, table stage, named stage).",
                    "key": "PREVENT_UNLOAD_TO_INTERNAL_STAGES",
                    "level": "",
                    "value": "false"
                  }
                ],
                "query_tag": [
                  {
                    "default": "",
                    "description": "String (up to 2000 characters) used to tag statements executed by the session",
                    "key": "QUERY_TAG",
                    "level": "",
                    "value": ""
                  }
                ],
                "quoted_identifiers_ignore_case": [
                  {
                    "default": "false",
                    "description": "If true, the case of quoted identifiers is ignored",
                    "key": "QUOTED_IDENTIFIERS_IGNORE_CASE",
                    "level": "",
                    "value": "false"
                  }
                ],
                "rows_per_resultset": [
                  {
                    "default": "0",
                    "description": "maxium number of rows in a result set",
                    "key": "ROWS_PER_RESULTSET",
                    "level": "",
                    "value": "0"
                  }
                ],
                "s3_stage_vpce_dns_name": [
                  {
                    "default": "",
                    "description": "S3 VPCE DNS name to access internal stage bucket over privatelink",
                    "key": "S3_STAGE_VPCE_DNS_NAME",
                    "level": "",
                    "value": ""
                  }
                ],
                "search_path": [
                  {
                    "default": "$current, $public",
                    "description": "Search path for unqualified object references.",
                    "key": "SEARCH_PATH",
                    "level": "",
                    "value": "$current, $public"
                  }
                ],
                "simulated_data_sharing_consumer": [
                  {
                    "default": "",
                    "description": "Data sharing views will return rows as if executed in the specified consumer account.",
                    "key": "SIMULATED_DATA_SHARING_CONSUMER",
                    "level": "",
                    "value": ""
                  }
                ],
                "statement_queued_timeout_in_seconds": [
                  {
                    "default": "0",
                    "description": "Timeout in seconds for queued statements: statements will automatically be canceled if they are queued on a warehouse for longer than this amount of time; disabled if set to zero.",
                    "key": "STATEMENT_QUEUED_TIMEOUT_IN_SECONDS",
                    "level": "",
                    "value": "0"
                  }
                ],
                "statement_timeout_in_seconds": [
                  {
                    "default": "172800",
                    "description": "Timeout in seconds for statements: statements are automatically canceled if they run for longer; if set to zero, max value (604800) is enforced.",
                    "key": "STATEMENT_TIMEOUT_IN_SECONDS",
                    "level": "",
                    "value": "172800"
                  }
                ],
                "strict_json_output": [
                  {
                    "default": "false",
                    "description": "JSON output is strictly compliant to the specification",
                    "key": "STRICT_JSON_OUTPUT",
                    "level": "",
                    "value": "false"
                  }
                ],
                "time_input_format": [
                  {
                    "default": "AUTO",
                    "description": "input format for time",
                    "key": "TIME_INPUT_FORMAT",
                    "level": "",
                    "value": "AUTO"
                  }
                ],
                "time_output_format": [
                  {
                    "default": "HH24:MI:SS",
                    "description": "display format for time",
                    "key": "TIME_OUTPUT_FORMAT",
                    "level": "",
                    "value": "HH24:MI:SS"
                  }
                ],
                "timestamp_day_is_always_24h": [
                  {
                    "default": "false",
                    "description": "If set, arithmetic on days always uses 24 hours per day,\npossibly not preserving the time (due to DST changes)",
                    "key": "TIMESTAMP_DAY_IS_ALWAYS_24H",
                    "level": "",
                    "value": "false"
                  }
                ],
                "timestamp_input_format": [
                  {
                    "default": "AUTO",
                    "description": "input format for timestamp",
                    "key": "TIMESTAMP_INPUT_FORMAT",
                    "level": "",
                    "value": "AUTO"
                  }
                ],
                "timestamp_ltz_output_format": [
                  {
                    "default": "",
                    "description": "Display format for TIMESTAMP_LTZ values. If empty, TIMESTAMP_OUTPUT_FORMAT is used.",
                    "key": "TIMESTAMP_LTZ_OUTPUT_FORMAT",
                    "level": "",
                    "value": ""
                  }
                ],
                "timestamp_ntz_output_format": [
                  {
                    "default": "YYYY-MM-DD HH24:MI:SS.FF3",
                    "description": "Display format for TIMESTAMP_NTZ values. If empty, TIMESTAMP_OUTPUT_FORMAT is used.",
                    "key": "TIMESTAMP_NTZ_OUTPUT_FORMAT",
                    "level": "",
                    "value": "YYYY-MM-DD HH24:MI:SS.FF3"
                  }
                ],
                "timestamp_output_format": [
                  {
                    "default": "YYYY-MM-DD HH24:MI:SS.FF3 TZHTZM",
                    "description": "Default display format for all timestamp types.",
                    "key": "TIMESTAMP_OUTPUT_FORMAT",
                    "level": "",
                    "value": "YYYY-MM-DD HH24:MI:SS.FF3 TZHTZM"
                  }
                ],
                "timestamp_type_mapping": [
                  {
                    "default": "TIMESTAMP_NTZ",
                    "description": "If TIMESTAMP type is used, what specific TIMESTAMP* type it should map to:\n  TIMESTAMP_LTZ, TIMESTAMP_NTZ (default) or TIMESTAMP_TZ",
                    "key": "TIMESTAMP_TYPE_MAPPING",
                    "level": "",
                    "value": "TIMESTAMP_NTZ"
                  }
                ],
                "timestamp_tz_output_format": [
                  {
                    "default": "",
                    "description": "Display format for TIMESTAMP_TZ values. If empty, TIMESTAMP_OUTPUT_FORMAT is used.",
                    "key": "TIMESTAMP_TZ_OUTPUT_FORMAT",
                    "level": "",
                    "value": ""
                  }
                ],
                "timezone": [
                  {
                    "default": "America/Los_Angeles",
                    "description": "time zone",
                    "key": "TIMEZONE",
                    "level": "",
                    "value": "America/Los_Angeles"
                  }
                ],
                "trace_level": [
                  {
                    "default": "OFF",
                    "description": "Trace level value to use when generating/filtering trace events",
                    "key": "TRACE_LEVEL",
                    "level": "",
                    "value": "OFF"
                  }
                ],
                "transaction_abort_on_error": [
                  {
                    "default": "false",
                    "description": "If this parameter is true, and a statement issued within a non-autocommit\ntransaction returns with an error, then the non-autocommit transaction is\naborted. All statements issued inside that transaction will fail until an\ncommit or rollback statement is executed to close that transaction.",
                    "key": "TRANSACTION_ABORT_ON_ERROR",
                    "level": "",
                    "value": "false"
                  }
                ],
                "transaction_default_isolation_level": [
                  {
                    "default": "READ COMMITTED",
                    "description": "The default isolation level when starting a starting a transaction, when no\nisolation level was specified",
                    "key": "TRANSACTION_DEFAULT_ISOLATION_LEVEL",
                    "level": "",
                    "value": "READ COMMITTED"
                  }
                ],
                "two_digit_century_start": [
                  {
                    "default": "1970",
                    "description": "For 2-digit dates, defines a century-start year.\nFor example, when set to 1980:\n  - parsing a string '79' will produce 2079\n  - parsing a string '80' will produce 1980",
                    "key": "TWO_DIGIT_CENTURY_START",
                    "level": "",
                    "value": "1970"
                  }
                ],
                "unsupported_ddl_action": [
                  {
                    "default": "ignore",
                    "description": "The action to take upon encountering an unsupported ddl statement",
                    "key": "UNSUPPORTED_DDL_ACTION",
                    "level": "",
                    "value": "ignore"
                  }
                ],
                "use_cached_result": [
                  {
                    "default": "true",
                    "description": "If enabled, query results can be reused between successive invocations of the same query as long as the original result has not expired",
                    "key": "USE_CACHED_RESULT",
                    "level": "",
                    "value": "true"
                  }
                ],
                "week_of_year_policy": [
                  {
                    "default": "0",
                    "description": "Defines the policy of assigning weeks to years:\n0: the week needs to have 4 days in a given year;\n1: a week with January 1st always belongs to a given year.",
                    "key": "WEEK_OF_YEAR_POLICY",
                    "level": "",
                    "value": "0"
                  }
                ],
                "week_start": [
                  {
                    "default": "0",
                    "description": "Defines the first day of the week:\n0: legacy Snowflake behavior; 1: Monday .. 7: Sunday.",
                    "key": "WEEK_START",
                    "level": "",
                    "value": "0"
                  }
                ]
              }
            ],
            "prevent_unload_to_internal_stages": false,
            "query_tag": "",
            "quoted_identifiers_ignore_case": false,
            "rows_per_resultset": 0,
            "rsa_public_key": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqPo8xvm0eHdsOaimXwJ7ORYNdmvKrlIB4xoOasF7oiCC1kSTyVUiT7/jEZ4/s3OREFKXSvnLOaW43lHjrz5Pi1699mkHEWMuoJK1ZtzFyhbpY0w7A6tu10Kn+Mnqw4vZyB13wPNJDVHZ62x6GZKV+yPNCnLONpzAhOhavrYruXefxTWQH7wp5anzHVMpxnP+hIpfvz70eShj+CKP+pqsDO3LMq3YQGCdVlwKuX0paCyzQ21YrtovM7NWmPfAcLP4HYpYJ085J6MgZUbsAEmfDhUgAattVjIZ5Uu4ArD1cyWPxLYDsqm4xuthmDlDNmCBvR+8kPvyoHIfRCi87/NZGwIDAQAB",
            "rsa_public_key_2": null,
            "s3_stage_vpce_dns_name": "",
            "search_path": "$current, $public",
            "show_output": [
              {
                "comment": "A service user for our streamlit community app.",
                "created_on": "2025-01-08 12:45:58.685 -0800 PST",
                "days_to_expiry": "",
                "default_namespace": "",
                "default_role": "RAG_N_ROLE",
                "default_secondary_roles": "",
                "default_warehouse": "RAG_N_ROLL",
                "disabled": false,
                "display_name": "Streamlit Service User",
                "email": "",
                "expires_at_time": "0001-01-01 00:00:00 +0000 UTC",
                "ext_authn_duo": false,
                "ext_authn_uid": "",
                "first_name": "",
                "has_mfa": false,
                "has_password": false,
                "has_rsa_public_key": true,
                "last_name": "",
                "last_success_login": "2025-01-08 14:30:03.868 -0800 PST",
                "locked_until_time": "0001-01-01 00:00:00 +0000 UTC",
                "login_name": "STREAMLIT_USER",
                "mins_to_bypass_mfa": "",
                "mins_to_unlock": "",
                "must_change_password": false,
                "name": "STREAMLIT_USER",
                "owner": "ACCOUNTADMIN",
                "snowflake_lock": false,
                "type": "SERVICE"
              }
            ],
            "simulated_data_sharing_consumer": "",
            "statement_queued_timeout_in_seconds": 0,
            "statement_timeout_in_seconds": 172800,
            "strict_json_output": false,
            "time_input_format": "AUTO",
            "time_output_format": "HH24:MI:SS",
            "timestamp_day_is_always_24h": false,
            "timestamp_input_format": "AUTO",
            "timestamp_ltz_output_format": "",
            "timestamp_ntz_output_format": "YYYY-MM-DD HH24:MI:SS.FF3",
            "timestamp_output_format": "YYYY-MM-DD HH24:MI:SS.FF3 TZHTZM",
            "timestamp_type_mapping": "TIMESTAMP_NTZ",
            "timestamp_tz_output_format": "",
            "timezone": "America/Los_Angeles",
            "trace_level": "OFF",
            "transaction_abort_on_error": false,
            "transaction_default_isolation_level": "READ COMMITTED",
            "two_digit_century_start": 1970,
            "unsupported_ddl_action": "ignore",
            "use_cached_result": true,
            "user_type": "SERVICE",
            "week_of_year_policy": 0,
            "week_start": 0
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "rsa_public_key"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "email"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "login_name"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "snowflake_account_role.streamlit_role",
            "snowflake_warehouse.rag_n_roll_warehouse"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "snowflake_warehouse",
      "name": "rag_n_roll_warehouse",
      "provider": "provider[\"registry.terraform.io/snowflake-labs/snowflake\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "auto_resume": "true",
            "auto_suspend": 120,
            "comment": "Warehouse for the RAG-N-ROLL project",
            "enable_query_acceleration": "default",
            "fully_qualified_name": "\"RAG_N_ROLL\"",
            "id": "RAG_N_ROLL",
            "initially_suspended": true,
            "max_cluster_count": null,
            "max_concurrency_level": 8,
            "min_cluster_count": null,
            "name": "RAG_N_ROLL",
            "parameters": [
              {
                "max_concurrency_level": [
                  {
                    "default": "8",
                    "description": "Maximum number of SQL statements a warehouse cluster can execute concurrently before queuing them. Small SQL statements count as a fraction of 1.",
                    "key": "MAX_CONCURRENCY_LEVEL",
                    "level": "",
                    "value": "8"
                  }
                ],
                "statement_queued_timeout_in_seconds": [
                  {
                    "default": "0",
                    "description": "Timeout in seconds for queued statements: statements will automatically be canceled if they are queued on a warehouse for longer than this amount of time; disabled if set to zero.",
                    "key": "STATEMENT_QUEUED_TIMEOUT_IN_SECONDS",
                    "level": "",
                    "value": "0"
                  }
                ],
                "statement_timeout_in_seconds": [
                  {
                    "default": "172800",
                    "description": "Timeout in seconds for statements: statements are automatically canceled if they run for longer; if set to zero, max value (604800) is enforced.",
                    "key": "STATEMENT_TIMEOUT_IN_SECONDS",
                    "level": "",
                    "value": "172800"
                  }
                ]
              }
            ],
            "query_acceleration_max_scale_factor": -1,
            "resource_monitor": null,
            "scaling_policy": null,
            "show_output": [
              {
                "auto_resume": true,
                "auto_suspend": 120,
                "available": 0,
                "comment": "Warehouse for the RAG-N-ROLL project",
                "created_on": "2025-01-08 13:08:44.369 -0800 PST",
                "enable_query_acceleration": false,
                "is_current": false,
                "is_default": false,
                "max_cluster_count": 1,
                "min_cluster_count": 1,
                "name": "RAG_N_ROLL",
                "other": 0,
                "owner": "ACCOUNTADMIN",
                "owner_role_type": "ROLE",
                "provisioning": 0,
                "query_acceleration_max_scale_factor": 8,
                "queued": 0,
                "quiescing": 0,
                "resource_monitor": "",
                "resumed_on": "2025-01-08 13:08:44.447 -0800 PST",
                "running": 0,
                "scaling_policy": "STANDARD",
                "size": "XSMALL",
                "started_clusters": 0,
                "state": "SUSPENDED",
                "type": "STANDARD",
                "updated_on": "2025-01-08 13:08:44.473 -0800 PST"
              }
            ],
            "statement_queued_timeout_in_seconds": 0,
            "statement_timeout_in_seconds": 172800,
            "warehouse_size": "XSMALL",
            "warehouse_type": null
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
